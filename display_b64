#!yasl_linux

//This function is used to print a return message, has no incidence on stacks
{
	"Wrong image : the image must be square.\n"
	print
	1
	exit
} print_wrong_image

//This function returns the square root of the top value from stack_1
//input_stack = 1						output_stack = 2
{
	1:4				// using stack 4 to loop
	1:3
	4:%@ (			// loop using stack 4
		3:=:3
		3:%*:3
		1:=:3
		3:%==:3  3:? (3:(!!!):3 4:! 0:4) : (
			3:%>:3 3:? (3:print_wrong_image:3) : (3:(!!!):3 1:3 3:+:3)
		)
	)
	4:(!) 			//cleaning stack_4
	3:=:2
	3:!				//Cleaning stack_3
} get_square_size

//This function counts the amount of pixels in the image
//input_stack = 9 					  output_stack = 1
{
	4:9
	9:/:9
	9:=:1				//store the amount of pixels on stack_1
	9:!					//clean stack_9 used as input and buffer
	get_square_size //returns square size on stack_2
} count_pixels

//This function prints the correct format for inputs after receiving the image
//input_stack = 2		output_stack = none
//it does not change the stack given as input and cleans every temp used
{
	"Image received, nb pixels : ":1
	1:print
	1:print
	"\nFound square : ":1
	1:print
	2:=:2
	2:print
	"\n":1
	1:print
	//stack_1 is now empty
} display_info

//This function explodes the image then calculates the amount of pixels
//It then proceed and creates strings from the result of a cat of size 4
{
	0:][:1 				//Split the image and stores the exploded result in stack_1

	4:1
	1:/:1				//calculate the amount of pixels char / 4 and stores is in stack_1
	1:#(
		4:7					//The sole purpose of this bit of code
		7:#(1:=:2 1:!)		//is to allow the stack to be ordered
		4 :7				//the same way it was ordered before
		7:#(2:=:3 2:!)		//iterating on it does a double reverse
		3 :7
		7:#(3:+:3) 
		3:=:0 
		3:!
	)
	// La stack 3 et 7 sont vides
} split_to_pixel_to_4char_string

//This function parses the map then returns the char in base 64 converted in decimals
//it also checks if a char in the map is out of the boundaries of the base_64
//input_stack = 6 not modified output_stack = 7
{
	(7:#:7 0:7 7:!=:7) 7:? (7:#:7 7:#!)
	6:%][:7
	7:!
	63:4
	3:=:7
	7:!=:7
	7:@(1:4
		4:-:4
		3:=:7
		(7:#:7 1:7 7:==:7) 7:? ("Incorrect char found in image\n":7 7:print 7:1 7:exit)
		7:!=:7
		)
	3:!
}	convert_decimal

//This function translates the big_int in three ints, R, G and B
//input_stack = 3				output_stack = 8
{
	3:2				//stack_2 used as a loop counter temp then cleaned
	2:%@(	
		3:=:3
		255:3
		3:&:8
		8:3
		3:>>:3		//bitshifting the big_int to get to the next int at next iteration
		1:2			//This is the core loop function
		2:-:2
		)
		2:!		//cleans the loop variable
} big_int_to_rgb

//This function returns the big int from the 4 ints given by the map
//input_stack = 4			output_stack = 4
{
	3:8
	8:#(6:4			
		4:<<:4
		4:|:4
	)

} big_int

//This function returns the final used colour from the shortened colour
//input_stack = 8 cleaned			output_stack = 4
{
	16:8
	8:+:8
	8:+:8
	8:+:4
}	shorten_to_colour

//This function takes an int on 32bits and returns an 8bit one
//input_stack = 3					output_stack = 8
{
	6:3
	3:*:3
	256:3
	3:/:8
} shorten_rgb

//This function takes the big_int and returns the colour, it calls shorten_rgb
//input_stack = 3					output_stack = 3
{
	3:2
	2:%@(						//uses stack_2 for a loop temp
		3:=:3
		255:3
		3:&:3
		shorten_rgb
		2:(= 1 ==):2 ? 8:(36 *):8
		2:(= 2 ==):2 ? 8:(6 *):8
		8:3
		3:>>:3
		1:2						//core loop usage
		2:-:2
	)
		2:! 					//clean loop temp usage
} big_int_to_colour

//This function takes the final shortened colour and print two spaces with the
//proper colour code
//input_stack=6,0	output_stack = none prints on screen
{
	(7:#:7 7:#:7 7:#!)		// wipe completely stack_7
	6:%][:7					// exploading base in stack_7 keeping stack_6 intact
	7:!						// removing number of chars from stack_7

	0:=:3					// Duplicate string in stack_3 modified there
	0:!						// clearing stack_0
	3:][:3					// exploading string in chars on stack_3
	3:!						// removing size of string from stack_3
	
	4:8
	8:#convert_decimal		//launching 4 times convert_decimal function
	big_int					//returns in stack_4 the big_ints from strings

	4:#:4
	4:#(4:=:3 4:!)
	big_int_to_colour		//returns the final colour unshortened 32bits
	shorten_to_colour		//return in stack_8 the final colour 8bits
	"\e[48;5;":8
	4:=:8
	"m  ":8
	8:(+ +):8
	8:print
	4:!
} print_colour

//0 a chaque pixel separer dans une srting recuperable dans l'ordre d'affichage
//1 le nombre de pixel par ligne
//2 a le nombre de pixel afficher sur la ligne courante
//3 est le lieu de travail pour afficher le pixel
//4 deuxieme lieu de travail pour jafficher le pixel
//5 sack pour faire les comparaison
//6 stock alphabet 64
//7 utilisation alphabet 64
//8 pas encore utiliser
//9 a le nombre de caractere total sa peut servir mais je sais pas pourquoi

//				****** MAIN ******* 

#!		//removing uneeded args

"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/":6

read
0:=:1
65535					//maximum read value 
0:==:2
2:@(read 0:=:1 65535:0 0:==:2 0:+:0 1:+:1) //looping again if maximum read value reached
1:=:9  					// storing total char amount in 9
1:!						// removing char amount in 1 
2:!						// cleaning stack_2

count_pixels
display_info
split_to_pixel_to_4char_string
						// Stack_0 : all the size 4 pixel strings
						// Stack_2 : square size (square root)
						// Stack_6 : storing base values
2:=:2
2:#(	//iterating on stack_2 for size times
	2:=:2
	2:#print_colour
	"\e[0m\n":9
	9:print
)
